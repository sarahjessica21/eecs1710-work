Game[][] board; //game board 
int cols =3; //there are 3 colums 
int rows =3; //there are 3 rows 
int player =0; //player 
int win =0; //win or draw 
int game =0; //game screen
int full =9; //determiens the draw 


void setup()
{
size(400, 400); 
smooth(); 
board =new Game[cols][rows];
for(int i=0; i<cols; i++)
{
for (int j=0; j<rows; j++)
{
board[i][j] =new Game(width /3 *i, height /3 *j, width /3, height /3); 
}
}
}

void draw() {
background(#FCEAB5); 
if(game ==0)
{
fill(0);
textSize(20);
text("Press ENTER to Begin", width /2 - width /4, height /2);
}
if(game ==1)
{
checkGame();
for(int i =0; i<cols; i++)
{
for (int j =0; j<rows; j++)
{
board[i][j].display();
}
}
}


}

void mousePressed()
{
  if(game ==1)
  {
    if(win ==0)
    {
      for(int i=0; i<cols; i++)
      {
        for(int j=0; j<rows; j++)
        {
          board[i][j].click(mouseX, mouseY);
        }
      }
    }
  }
}

void keyPressed()
{
  if(game ==0)
  {
    if(key ==ENTER)
    {
    game =1; //play screen
    full =9; 
    }
  }
  else if (game ==1 && win ==0 && full ==0)
  {
    if(key ==ENTER)
    {
      game =0; //play again screen 
      for(int i =0; i<cols; i++)
      {
      for(int j =0; j<rows; j++) 
      {
      board[i][j].clean();
      win =0; 
      full =9; 
      }
      }
    }
  }
  else if (game ==1 && (win ==1 || win ==2))
  {
  if(key ==ENTER)
  {
  game =0; //play again screen
      for(int i =0; i<cols; i++)
      {
      for(int j =0; j<rows; j++) 
      {
      board[i][j].clean();
      win =0; 
      full =9; 
      }
      }
  
  }
  }
  
  
  
  
  
  
}


//checks vertical and horizontal condition 
void checkGame() {
  int row =0; 
  for(int col =0; col<cols; col++)
  {
    if(board[col][row].checkState()==1 && board[col][row+1].checkState() ==1 && board[col][row+2].checkState() ==1)
    {
      win =1; //vertical 0 win 
    }
    else if(board[row][col].checkState() ==1 && board[row+1][col].checkState() ==1 && board[row+2][col].checkState() ==1) 
    {
      win =1; //horizontal 0 win 
    }
       else  if(board[col][row].checkState()==2 && board[col][row+1].checkState() ==2 && board[col][row+2].checkState() ==2)
    {
      win =2; //vertical X win 
    }
    else if(board[row][col].checkState() ==2 && board[row+1][col].checkState() ==2 && board[row+2][col].checkState() ==2) 
    {
      win =2; //horizontal X win 
    }
}

//checks diagonals 
if (board[row][row].checkState() ==1 && board[row+1][row+1].checkState() ==1 && board[row+2][row+2].checkState() ==1) 
  {
    win =1; 
  }
 else if (board[row][row].checkState() ==2 && board[row+1][row+1].checkState() ==2 && board[row+2][row+2].checkState() ==2) 
  {
    win =2; //diagonal X win 
  }
else if (board[0][row+2].checkState() ==1 && board[1][row+1].checkState() ==1 && board[2][row].checkState() ==1) 
{
  win =1; 
}
else if (board[0][row+2].checkState() ==2 && board[1][row+1].checkState() ==2 && board[2][row].checkState() ==2) 
{
  win =2; 
}

//print the winner 

fill(255); 
textSize(20); 

if(win ==1){
  fill(#3FC48B); 
  text("Player One Wins", board [1][1].checkX() +40, board [1][1].checkY() +50); 
} 

else if(win ==2){
  fill(#EA181B); 
  text("Player Two Wins", board [1][1].checkX() +40, board [1][1].checkY() +50); 
} 

if(win ==1 || win ==2)
{
  fill(#18A6EA); 
  textSize(25); 
  text("Press ENTER to Play Again", width/2 - width/2 +23, height/2 - height/6 - 20); 
}

if(win ==0 && full ==0)
{
  fill(#18A6EA); 
  textSize(40);
  text("Press ENTER to Begin", width/2 - width/2 +23, height/2 - height/6 - 20); 
}

}

class Game {
  
  int x; 
  int y; 
  int w;
  int h;
  int state;
  
  Game(int tx, int ty, int tw, int th)
  {
    x=tx; 
    y=ty; 
    w=tw; 
    h=th;
    
  }
  void click(int tx, int ty){
    int mx=tx; 
    int my=ty; 
    if (mx>x && mx<x +w && my>y && my<y+h)
    {
      if (player ==0 && state ==0)
      {
      state=1;
      full=-1; 
      player=1; 
      }
      else if (player==1 && state==0){
        state=2; 
        full=-1; 
        player=0; 
      }
    } 
}
void clean(){
  state=0;
}
int checkState(){
  return state; 
  }
int checkX()
{
  return x; 
}
int checkY()
{
  return y; 
}

void display() {
  
  noFill();
  stroke(0);
  strokeWeight(3);
  rect(x, y, w, h);
  if (state ==1)
  {
    ellipseMode(CORNER);
    stroke(0);
    ellipse(x, y, w, h);
    
  }
  else if (state ==2)
  {
    stroke(0); 
    line(x, y, x+w, y+h); //makes diagonal lines 
    line(x+w, y, x, y+h); 
    }
    }   
    
    
}
